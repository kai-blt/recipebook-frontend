[{"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\index.js":"1","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\App.js":"2","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\reportWebVitals.js":"3","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Home.js":"4","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Login.js":"5","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Nav.js":"6","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\axios\\axiosWithAuth.js":"7","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\validation\\schema.js":"8","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\routes\\ProtectedRoute.js":"9","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\index.js":"10","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\IngredientList.js":"11","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\RecipeCard.js":"12","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\AddRecipeForm.js":"13","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\RecipeView.js":"14","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\RecipeThumbnail.js":"15","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\styles\\globalStyles.js":"16","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\index.js":"17","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\ducks\\index.js":"18","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\ducks\\userDuck.js":"19","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\ducks\\recipeDuck.js":"20","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\utils\\useFormHelpers.js":"21"},{"size":750,"mtime":1615326928459,"results":"22","hashOfConfig":"23"},{"size":823,"mtime":1615327330912,"results":"24","hashOfConfig":"23"},{"size":348,"mtime":1615326928459,"results":"25","hashOfConfig":"23"},{"size":290,"mtime":1615327305241,"results":"26","hashOfConfig":"23"},{"size":3209,"mtime":1615327814463,"results":"27","hashOfConfig":"23"},{"size":928,"mtime":1615327805497,"results":"28","hashOfConfig":"23"},{"size":296,"mtime":1615326928460,"results":"29","hashOfConfig":"23"},{"size":605,"mtime":1615326928459,"results":"30","hashOfConfig":"23"},{"size":345,"mtime":1615326928459,"results":"31","hashOfConfig":"23"},{"size":232,"mtime":1615307474228,"results":"32","hashOfConfig":"23"},{"size":678,"mtime":1615327561674,"results":"33","hashOfConfig":"23"},{"size":10667,"mtime":1615336332708,"results":"34","hashOfConfig":"23"},{"size":7772,"mtime":1615337074951,"results":"35","hashOfConfig":"23"},{"size":8957,"mtime":1615338149394,"results":"36","hashOfConfig":"23"},{"size":1296,"mtime":1615327475318,"results":"37","hashOfConfig":"23"},{"size":5313,"mtime":1615326928460,"results":"38","hashOfConfig":"23"},{"size":588,"mtime":1615330362501,"results":"39","hashOfConfig":"23"},{"size":140,"mtime":1615330356667,"results":"40","hashOfConfig":"23"},{"size":4588,"mtime":1615329311968,"results":"41","hashOfConfig":"23"},{"size":5005,"mtime":1615338106427,"results":"42","hashOfConfig":"23"},{"size":3707,"mtime":1615335350686,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1fzh7t8",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\index.js",[],["90","91"],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\App.js",["92"],"import { Switch, Route, Redirect } from 'react-router';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport { RecipeView } from './components/recipe/';\nimport styled from 'styled-components';\nimport ProtectedRoute from './routes/ProtectedRoute';\n\nfunction App() {\n  return (\n  <>\n  <AppContainer>    \n    <Nav />\n    <Switch>\n      <ProtectedRoute path=\"/recipes\" component={RecipeView}/>\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  </ AppContainer>\n  </>\n  );\n}\n\n//Component Styles\nconst AppContainer = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 80%;\n  margin: auto;  \n\n  @media(max-width: 700px) {\n  width: 95%;\n  }\n\n  @media(max-width: 500px) {\n  width: 95%;\n  }\n`;\n\nexport default App;\n","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\reportWebVitals.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Home.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Login.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Nav.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\axios\\axiosWithAuth.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\validation\\schema.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\routes\\ProtectedRoute.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\index.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\IngredientList.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\RecipeCard.js",["93","94"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { recipeActions } from '../../state/ducks';\r\nimport IngredientList from './IngredientList';\r\nimport axiosWithAuth from '../../axios/axiosWithAuth';\r\nimport { useFormHelpers } from '../utils/useFormHelpers';\r\n\r\n\r\nimport  { v4 as uuidv4 } from \"uuid\";\r\nimport * as yup from 'yup';\r\nimport schema from '../../validation/schema';\r\nimport styled from 'styled-components';\r\n\r\n\r\nfunction RecipeCard(props) {\r\n  const { recipe, setRecipes, setClicked } = props;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [enableSubmit, setEnableSubmit] = useState(true);\r\n  const [groups, setGroups] = useState(Array.from(new Set(recipe.ingredients.map(ing => ing.ingredientgroup))));\r\n\r\n  //Form Helper Utils\r\n  const { \r\n    initialFormValues,\r\n    errors,\r\n    setErrors,\r\n    formValues,\r\n    setFormValues,\r\n    addIngredient,\r\n    delIngredient,\r\n    addStep,\r\n    delStep,\r\n    handleChange\r\n  } = useFormHelpers();\r\n\r\n\r\n  //Redux State Managers\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    schema.isValid(formValues).then(valid => {\r\n      setEnableSubmit(!valid);\r\n    });\r\n  }, [formValues]);\r\n\r\n  useEffect(() => {\r\n     setGroups((Array.from(new Set(recipe.ingredients.map(ing => ing.ingredientgroup)))).sort());\r\n  }, [recipe.ingredients]);\r\n  \r\n  //Edit Handler\r\n  const handleEdit = (e) => {\r\n    e.preventDefault();   \r\n    setIsEditing(!isEditing);\r\n    setFormValues({ ...formValues, ...recipe });\r\n  };\r\n\r\n  //Submit Handler\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();   \r\n\r\n    yup.reach(schema, e.target.name)\r\n    .validate(e.target.value)\r\n    .then(() => { \r\n      setErrors({...errors, [e.target.name]: \"\"})\r\n    })\r\n    .catch(err => {\r\n      setErrors({...errors, [e.target.name]: err.errors[0] })\r\n    });\r\n       \r\n    //Create New Recipe Object\r\n    const { name, type, imageURL, ingredients, steps } = formValues;\r\n    const updatedRecipe = {\r\n      name,\r\n      type,\r\n      user: {\r\n          username: localStorage.getItem(\"username\")\r\n        },\r\n      imageURL,\r\n      ingredients,\r\n      steps\r\n    };\r\n\r\n    //Dispatch action to edit/update recipe\r\n    dispatch(recipeActions.editRecipe(recipe.recipeid, updatedRecipe));\r\n\r\n    //Reinitialize form state\r\n    setFormValues(initialFormValues);\r\n    setClicked(name);\r\n    setIsEditing(!isEditing);\r\n  };\r\n\r\n\r\n  const deleteRecipe = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(recipeActions.deleteRecipe(recipe.recipeid));    \r\n    \r\n    // Scroll to top for Safari\r\n    document.body.scrollTop = 0;\r\n    // Scroll to top for Chrome, Firefox, IE, Opera\r\n    document.documentElement.scrollTop = 0;  \r\n  }\r\n\r\n\r\n  return(\r\n    <RecipeCardContainer>  \r\n      \r\n      {/* Recipe Title Information */}          \r\n      <RecipeTitle>\r\n        <div>\r\n          <h2>{recipe.name}</h2>\r\n          {recipe.type ? <h4>{recipe.type}</h4> : null}\r\n        </div>\r\n        <div className=\"edit\">\r\n          {!isEditing\r\n            ? <button className=\"editBtn\" onClick={handleEdit}>Edit</button>\r\n            : <button className=\"cancelBtn\" onClick={handleEdit}>Cancel</button>\r\n          }\r\n        </div>\r\n      </RecipeTitle>\r\n\r\n      {/* Show Recipe Info (Ingredients & Steps) OR Edit form if editing */}\r\n      {!isEditing\r\n        ? (\r\n          <>\r\n            <ImageContainer background={recipe.imageURL}/>\r\n            <InfoBox>\r\n              <h3>Ingredients</h3>            \r\n              {groups.map(grp => <IngredientList group={grp} ingredients={recipe.ingredients} /> )}\r\n            </InfoBox>\r\n            <InfoBox>\r\n              <h3>Steps</h3>\r\n              {recipe.steps.map(stp => <StepContainer key={uuidv4()}><div><strong>{stp.stepnumber}.</strong></div><div>{stp.instructions}</div></StepContainer>)}\r\n            </InfoBox>\r\n          </>\r\n        )\r\n        : (\r\n          <>\r\n            {/* Recipe Title Forms */}\r\n            <EditInfoBox>\r\n              <div className=\"title\">\r\n                <label>Title\r\n                  <input \r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={formValues.name}\r\n                    onChange={handleChange}\r\n                  />\r\n                </label>  \r\n              </div>\r\n              <div className=\"type\">\r\n                <label>Type\r\n                  <input \r\n                    type=\"text\"\r\n                    name=\"type\"\r\n                    value={formValues.type}\r\n                    onChange={handleChange}\r\n                  />\r\n                </label>  \r\n              </div>\r\n            </EditInfoBox>             \r\n            <label>Image URL\r\n              <input \r\n                type=\"text\"\r\n                name=\"imageURL\"\r\n                value={formValues.imageURL}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n\r\n            {/* Ingredients Forms */}\r\n            <InfoBox>\r\n            <h3>Ingredients</h3>\r\n            {formValues.ingredients.map((ing, index) => (\r\n              <>\r\n              <IngredientFields>\r\n                <div className=\"qty\">\r\n                  <label>Qty<br/>\r\n                    <input \r\n                      type=\"text\"\r\n                      name=\"quantity\"\r\n                      value={formValues.ingredients[index].quantity}\r\n                      onChange={e => handleChange(e, index)}                      \r\n                    />\r\n                    </label>\r\n                </div>\r\n                <div className=\"msr\">\r\n                  <label>Measure\r\n                    <input \r\n                      type=\"text\"\r\n                      name=\"measurement\"\r\n                      value={formValues.ingredients[index].measurement}\r\n                      onChange={e => handleChange(e, index)}\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"ing\">\r\n                  <label>Ingredient\r\n                    <input \r\n                      type=\"text\"\r\n                      name=\"ingredientname\"\r\n                      value={formValues.ingredients[index].name}\r\n                      onChange={e => handleChange(e, index)}\r\n                    />\r\n                  </label>\r\n                </div>       \r\n                <div className=\"grp\">\r\n                  <label>Group\r\n                    <input \r\n                      type=\"text\"\r\n                      name=\"group\"\r\n                      value={formValues.ingredients[index].ingredientgroup}\r\n                      onChange={e => handleChange(e, index)}\r\n                    />\r\n                  </label>\r\n                </div> \r\n                <ButtonContainer className=\"btns\">\r\n                  {formValues.ingredients.length === 1\r\n                  ?\r\n                    <div></div>\r\n                  :\r\n                    <div>\r\n                      <button className=\"deleteBtn2\" onClick={e => delIngredient(e, index)}>-</button>\r\n                    </div>\r\n                  }\r\n                  <div>\r\n                    <button className=\"addBtn\" onClick={e => addIngredient(e, index)}>+</button>\r\n                  </div>\r\n                </ButtonContainer>                 \r\n              </IngredientFields>\r\n              </>\r\n            ))}\r\n            </InfoBox>\r\n\r\n            {/* Step Forms */}\r\n            <InfoBox>\r\n            <h3>Steps</h3>\r\n            {formValues.steps.map((stp, index) => (\r\n              <IngredientFields>\r\n                <div className=\"step\">\r\n                  <label>Step {formValues.steps[index].stepnumber}\r\n                    <input \r\n                      type=\"text\"\r\n                      name=\"instructions\"\r\n                      value={formValues.steps[index].instructions}\r\n                      onChange={e => handleChange(e, index)}\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <ButtonContainer className=\"btns\">\r\n                  {formValues.steps.length === 1\r\n                  ?\r\n                    <div></div>\r\n                  :\r\n                    <div>\r\n                      <button className=\"deleteBtn2\" onClick={e => delStep(e, index)}>-</button>\r\n                    </div>\r\n                  }\r\n                  <div>\r\n                    <button className=\"addBtn\" onClick={e => addStep(e, index)}>+</button>\r\n                  </div>\r\n                </ButtonContainer>\r\n              </IngredientFields>\r\n            ))}\r\n            </InfoBox>\r\n            <ButtonContainer>\r\n              <button className=\"deleteBtn\" onClick={deleteRecipe}>Delete</button>\r\n              {enableSubmit ? <button className=\"disabled\">Submit</button> :  <button className=\"submitBtn\" onClick={handleSubmit}>Submit</button>}\r\n            </ButtonContainer>\r\n          </>\r\n        )\r\n      }\r\n    </RecipeCardContainer>\r\n  );\r\n}\r\n\r\n//Component Styles\r\nconst RecipeCardContainer = styled.div`\r\n  margin-bottom: 4%;\r\n`;\r\n\r\nconst InfoBox = styled.div`\r\n  margin: 10% 0; \r\n\r\n  .group {\r\n    color: red;\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  height: 30vh;\r\n  background: ${({background}) => background.match(/http/i) ? 'url(' + background + ')': '#555' };\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 8px;\r\n  color: #fff;\r\n  margin: 6% 0;\r\n  @media (max-width: 1000px) {\r\n    height: 20vh;\r\n  }\r\n`;\r\n\r\n\r\nconst EditInfoBox = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  .title {\r\n    width: 65%;\r\n  }\r\n\r\n  .type {\r\n    width: 30%;\r\n  }\r\n`;\r\n\r\n\r\nconst RecipeTitle = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  flex-flow: column wrap;\r\n  .edit {\r\n    width: 100%;\r\n  }\r\n\r\n  h2 {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  h4 {\r\n    font-weight: 500;\r\n  }\r\n\r\n  @media (max-width: 1200px) {\r\n    .edit {\r\n      width: 100%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst IngredientFields = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  padding-bottom: 15%;\r\n\r\n  div {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-flow: row nowrap;\r\n  margin-top: 2%;\r\n  background: 1px solid red;\r\n\r\n  div {\r\n    width: 20%;\r\n  }\r\n`;\r\n\r\n\r\nconst StepContainer = styled.div`\r\n  display: flex;\r\n  line-height: 2.25rem;\r\n  margin-bottom: 2.5%;\r\n  margin-left: 6%;\r\n  div {\r\n    margin-right: 2%;\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    margin-bottom: 6%;\r\n  }\r\n`;\r\n\r\nexport default RecipeCard;","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\AddRecipeForm.js",["95"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { recipeActions } from '../../state/ducks';\r\nimport { useFormHelpers } from '../utils/useFormHelpers';\r\n\r\nimport schema from '../../validation/schema';\r\nimport styled from 'styled-components';\r\n\r\nconst AddRecipeForm = (props) => {\r\n  const { setIsCreating, setClicked } = props;\r\n  const [enableSubmit, setEnableSubmit] = useState(true);\r\n\r\n  //Form Helper Utils\r\n  const { \r\n    initialFormValues,\r\n    errors,\r\n    formValues,\r\n    setFormValues,\r\n    addIngredient,\r\n    delIngredient,\r\n    addStep,\r\n    delStep,\r\n    handleChange\r\n  } = useFormHelpers();\r\n\r\n  //Redux State Managers\r\n  const dispatch = useDispatch();\r\n  const { status } = useSelector(state => state.recipes);\r\n  \r\n  useEffect(() => {\r\n    schema.isValid(formValues)\r\n      .then(valid => {\r\n        setEnableSubmit(!valid);\r\n      });\r\n  }, [formValues]); \r\n\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();   \r\n\r\n    //Create new recipe object\r\n    const { name, type, imageURL, ingredients, steps } = formValues;\r\n    const newRecipe = {\r\n      name,\r\n      type,\r\n      user: {\r\n          username: localStorage.getItem(\"username\")\r\n        },\r\n      imageURL,\r\n      ingredients,\r\n      steps\r\n    };\r\n\r\n    //Dispatch action to add recipe\r\n    dispatch(recipeActions.addRecipe(newRecipe));   \r\n    \r\n    //Reinitialize form state\r\n    setFormValues(initialFormValues);\r\n    setClicked(name);\r\n    setIsCreating(e);\r\n\r\n    // Scroll to top for Safari\r\n    document.body.scrollTop = 0;\r\n    // Scroll to top for Chrome, Firefox, IE, Opera\r\n    document.documentElement.scrollTop = 0;\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <FormContainer>\r\n      <RecipeTitle>\r\n        <div>\r\n          <h2>{formValues.name || <br/>}</h2>\r\n          <h4>{formValues.type || <br/>}</h4>          \r\n        </div>\r\n        <button className=\"cancelBtn\" onClick={setIsCreating}>Cancel</button>\r\n      </RecipeTitle>\r\n\r\n      {/* Recipe Title/Image Form Fields */}\r\n      <InfoBox>\r\n        <EditInfoBox>\r\n          <div className=\"title\">\r\n          <label>Title\r\n            <input \r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={formValues.name}\r\n              onChange={handleChange}\r\n            />\r\n          </label>  \r\n          </div>\r\n          <div className=\"type\">\r\n          <label>Type\r\n            <input \r\n              type=\"text\"\r\n              name=\"type\"\r\n              value={formValues.type}\r\n              onChange={handleChange}\r\n            />\r\n          </label>  \r\n          </div>\r\n        </EditInfoBox>             \r\n        <label>Image URL\r\n          <input \r\n            type=\"text\"\r\n            name=\"imageURL\"\r\n            value={formValues.imageURL}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <ErrorMessages>\r\n          <div>{errors.name}</div>\r\n          <div>{errors.type}</div>\r\n          <div>{errors.imageURL}</div>\r\n        </ErrorMessages>\r\n      </InfoBox>\r\n\r\n      {/* Ingredient Form Fields */}\r\n      <InfoBox>\r\n        <h3>Ingredients</h3>\r\n        {formValues.ingredients.map((ing, index) => (\r\n          <IngredientFields>\r\n            <div className=\"qty\">\r\n              <label>Qty\r\n                <input \r\n                  type=\"text\"\r\n                  name=\"quantity\"\r\n                  value={formValues.ingredients[index].quantity}\r\n                  onChange={e => handleChange(e, index)}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"msr\">\r\n              <label>Measure\r\n                <input \r\n                  type=\"text\"\r\n                  name=\"measurement\"\r\n                  value={formValues.ingredients[index].measurement}\r\n                  onChange={e => handleChange(e, index)}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"ing\"> \r\n              <label>Ingredient\r\n                <input \r\n                  type=\"text\"\r\n                  name=\"ingredientname\"\r\n                  value={formValues.ingredients[index].name}\r\n                  onChange={e => handleChange(e, index)}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"grp\">\r\n              <label>Group\r\n                <input \r\n                  type=\"text\"\r\n                  name=\"group\"\r\n                  value={formValues.ingredients[index].group}\r\n                  onChange={e => handleChange(e, index)}\r\n                />\r\n              </label>\r\n            </div> \r\n            <ButtonContainer>\r\n              {formValues.ingredients.length === 1\r\n              ?\r\n                <div></div>\r\n              :\r\n                <div>\r\n                  <button className=\"deleteBtn2\" onClick={e => delIngredient(e, index)}>-</button>\r\n                </div>\r\n              }\r\n              <div>\r\n                <button className=\"addBtn\" onClick={e => addIngredient(e, index)}>+</button>\r\n              </div>\r\n            </ButtonContainer>\r\n          </IngredientFields>\r\n        ))}\r\n        <ErrorMessages>\r\n          {errors.quantity}\r\n          {errors.measurement}\r\n          {errors.ingredientname}\r\n          {errors.group}\r\n        </ErrorMessages>\r\n      </InfoBox>\r\n\r\n      {/* Step Form Fields */}\r\n      <InfoBox>\r\n        <h3>Steps</h3>\r\n        {formValues.steps.map((stp, index) => (\r\n          <IngredientFields>\r\n            <div className=\"step\">\r\n              <label>Step {formValues.steps[index].stepnumber}\r\n                <input \r\n                  type=\"text\"\r\n                  name=\"instructions\"\r\n                  value={formValues.steps[index].instructions}\r\n                  onChange={e => handleChange(e, index)}\r\n                />\r\n              </label>\r\n            </div>\r\n            <ButtonContainer>\r\n              {formValues.steps.length === 1\r\n              ?\r\n                <div></div>\r\n              :\r\n                <div>\r\n                  <button className=\"deleteBtn2\" onClick={e => delStep(e, index)}>-</button>\r\n                </div>\r\n              }\r\n              <div>\r\n                <button className=\"addBtn\" onClick={e => addStep(e, index)}>+</button>\r\n              </div>\r\n            </ButtonContainer>\r\n          </IngredientFields>\r\n        ))}\r\n      </InfoBox>   \r\n      <ErrorMessages>\r\n        {errors.instructions}\r\n      </ErrorMessages>\r\n      {enableSubmit ? <button className=\"disabled\">Submit</button> :  <button className=\"addBtn\" onClick={e => handleSubmit(e)}>Submit</button>}\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\n//Component Styles\r\nconst FormContainer = styled.div`\r\n  margin-bottom: 4%;\r\n`;\r\n\r\nconst RecipeTitle = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  flex-flow: column wrap;\r\n  .edit {\r\n    width: 100%;\r\n  }\r\n\r\n  h2 {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  h4 {\r\n    font-weight: 500;\r\n  }\r\n\r\n  @media (max-width: 1200px) {\r\n    .edit {\r\n      width: 100%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst InfoBox = styled.div`\r\n  margin: 10% 0;\r\n`;\r\n\r\n\r\nconst EditInfoBox = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  .title {\r\n    width: 65%;\r\n  }\r\n\r\n  .type {\r\n    width: 30%;\r\n  }\r\n`;\r\n\r\nconst IngredientFields = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  padding-bottom: 15%;\r\n\r\n  div {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n   display: flex;\r\n   justify-content: space-between;\r\n   flex-flow: row nowrap;\r\n   margin-top: 2%;\r\n\r\n   div {\r\n     width: 20%;\r\n   }\r\n`;\r\n\r\nconst ErrorMessages = styled.div`\r\n  color: #d9534f;\r\n`;\r\n\r\nexport default AddRecipeForm;\r\n\r\n","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\RecipeView.js",["96","97"],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\recipe\\RecipeThumbnail.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\styles\\globalStyles.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\index.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\ducks\\index.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\ducks\\userDuck.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\state\\ducks\\recipeDuck.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\utils\\useFormHelpers.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":25,"nodeType":"104","messageId":"105","endLine":1,"endColumn":33},{"ruleId":"102","severity":1,"message":"106","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":21},{"ruleId":"102","severity":1,"message":"107","line":16,"column":19,"nodeType":"104","messageId":"105","endLine":16,"endColumn":29},{"ruleId":"102","severity":1,"message":"108","line":28,"column":11,"nodeType":"104","messageId":"105","endLine":28,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":29,"column":3,"nodeType":"111","messageId":"112","endLine":34,"endColumn":4},{"ruleId":"113","severity":1,"message":"114","line":32,"column":5,"nodeType":"115","messageId":"116","endLine":33,"endColumn":43},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'axiosWithAuth' is defined but never used.","'setRecipes' is assigned a value but never used.","'status' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-global-assign","no-unsafe-negation"]