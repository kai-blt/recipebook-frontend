[{"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\index.js":"1","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\App.js":"2","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\reportWebVitals.js":"3","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Home.js":"4","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\globalStyles.js":"5","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Login.js":"6","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Recipes.js":"7","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Nav.js":"8","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\axios\\axiosWithAuth.js":"9","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeCard.js":"10","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeList.js":"11","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\AddRecipeForm.js":"12","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\validation\\schema.js":"13"},{"size":640,"mtime":1610585708057,"results":"14","hashOfConfig":"15"},{"size":685,"mtime":1610419945787,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":366,"mtime":1610400430019,"results":"18","hashOfConfig":"15"},{"size":5795,"mtime":1610585723469,"results":"19","hashOfConfig":"15"},{"size":4140,"mtime":1610407968833,"results":"20","hashOfConfig":"15"},{"size":4279,"mtime":1610490231741,"results":"21","hashOfConfig":"15"},{"size":590,"mtime":1610435209992,"results":"22","hashOfConfig":"15"},{"size":298,"mtime":1610406757569,"results":"23","hashOfConfig":"15"},{"size":15551,"mtime":1610490444047,"results":"24","hashOfConfig":"15"},{"size":1312,"mtime":1610435354595,"results":"25","hashOfConfig":"15"},{"size":12066,"mtime":1610586691738,"results":"26","hashOfConfig":"15"},{"size":552,"mtime":1610587048231,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fzh7t8",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\index.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\App.js",[],["57","58"],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\reportWebVitals.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Home.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\globalStyles.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Login.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Recipes.js",["59","60","61"],"import React, { useEffect, useState } from 'react';\r\nimport axiosWithAuth from '../axios/axiosWithAuth';\r\nimport RecipeList from './RecipeList';\r\nimport RecipeCard from './RecipeCard';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styled from 'styled-components';\r\nimport AddRecipeForm from './AddRecipeForm';\r\n\r\nconst RecipeContainer = styled.div`\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: space-between;   \r\n    align-items: flex-start;\r\n    margin: 0;\r\n    padding: 0; \r\n    width: 100%;\r\n    border-radius: 10px;\r\n    background: #222;\r\n    box-shadow: inset 4px 4px 10px #111;\r\n`;\r\n\r\nconst SearchNav = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    flex-flow: row wrap;\r\n    margin-bottom: 6%;\r\n    \r\n    div {\r\n        width: 40%;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        div {\r\n            width: 100%;\r\n        }\r\n    }\r\n`;    \r\n\r\nconst RecipeListPane = styled.div`\r\n    width: 50%;\r\n    height: 100vh;\r\n    padding-top: 4%;\r\n    padding-left: 8%;\r\n    padding-right: 8%;\r\n    padding-bottom: 50%;\r\n    padding-bottom: 50%;\r\n`;\r\n\r\nconst RecipeDirectionsPane = styled.div`\r\n    width: 50%;\r\n    height: 100%;\r\n    padding-top: 4%;\r\n    padding-left: 8%;\r\n    padding-right: 8%;\r\n    padding-bottom: 50%;\r\n    border-left: 1px dashed #888;\r\n`;\r\n\r\n\r\nconst initialErrors = {\r\n    name: \"\",\r\n    type: \"\",\r\n    imageURL: \"\",\r\n    quantity: \"\",\r\n    ingredientname: \"\",\r\n    measurement: \"\",\r\n    group: \"\",\r\n    instructions: \"\"\r\n}\r\n\r\n\r\nfunction Recipes(props) {\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [clicked, setClicked] = useState('');\r\n    const [isCreating, setIsCreating] = useState(false);\r\n    const [enableSubmit, setEnableSubmit] = useState(true);\r\n\r\n\r\n    useEffect(() => {\r\n        axiosWithAuth().get('/users/getuserinfo')\r\n            .then(res => {\r\n                console.log(res.data.recipes);\r\n                setRecipes(res.data.recipes);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }, []);    \r\n\r\n\r\n    const onChange = (e) => {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        setClicked(e.target.innerHTML);\r\n    }\r\n\r\n    const createNewRecipe = (e) => {\r\n        e.preventDefault();\r\n        setIsCreating(!isCreating);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <RecipeContainer>                         \r\n            <RecipeListPane>\r\n                <SearchNav>\r\n                    <div>\r\n                    <label>Search&nbsp;\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            onChange={onChange}\r\n                        />\r\n                    </label>\r\n                    </div>\r\n                    <div className=\"add\">\r\n                        <button onClick={createNewRecipe}>New Recipe</button>\r\n                    </div>\r\n                </SearchNav>\r\n                {recipes \r\n                    ? recipes\r\n                        .filter(recipe => recipe.name.match(new RegExp(`${search}`, \"i\")))\r\n                        .map(recipe => <RecipeList key={uuidv4()} recipe={recipe} onClick={handleClick}/>)\r\n                    : <div>Fetching recipes...</div>\r\n                }\r\n            </RecipeListPane>\r\n\r\n            {isCreating\r\n                ?\r\n                    <RecipeDirectionsPane>\r\n                        <AddRecipeForm setIsCreating={setIsCreating} setRecipes={setRecipes}/>\r\n                    </RecipeDirectionsPane>\r\n                : \r\n                    <RecipeDirectionsPane>\r\n                        {clicked\r\n                            ? recipes\r\n                                .filter(recipe => recipe.name.match(new RegExp(`${clicked}`, \"i\")))\r\n                                .map(recipe => <RecipeCard key={uuidv4()} recipe={recipe} setRecipes={setRecipes} setClicked={setClicked} />)\r\n                            : null\r\n                        }     \r\n                    </RecipeDirectionsPane>                \r\n            }    \r\n        </RecipeContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Recipes;","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Nav.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\axios\\axiosWithAuth.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeCard.js",["62"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport  { v4 as uuidv4 } from \"uuid\";\r\nimport * as yup from 'yup';\r\nimport schema from '../validation/schema';\r\nimport axiosWithAuth from '../axios/axiosWithAuth';\r\nimport gsap from 'gsap';\r\nimport styled from 'styled-components';\r\n\r\nconst RecipeCardContainer = styled.div`\r\n    margin-bottom: 4%;\r\n`;\r\n\r\nconst InfoBox = styled.div`\r\n    margin: 10% 0;\r\n`;\r\n\r\nconst EditInfoBox = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-between;\r\n    .title {\r\n        width: 65%;\r\n    }\r\n\r\n    .type {\r\n        width: 30%;\r\n    }\r\n`;\r\n\r\n\r\nconst RecipeTitle = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: flex-start;\r\n    flex-flow: row wrap;\r\n    .edit {\r\n        width: 20%;\r\n    }\r\n\r\n    @media (max-width: 1000px) {\r\n        .edit {\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nconst IngredientFields = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding-bottom: 2%;\r\n\r\n    .qty {\r\n        width: 10%;\r\n    }\r\n\r\n    .msr {\r\n        width: 15%;\r\n    }\r\n\r\n    .ing {\r\n        width: 30%;\r\n    }\r\n\r\n    .grp {\r\n        width: 20%;\r\n    }\r\n\r\n    .step {\r\n        width: 85%;\r\n    }\r\n\r\n    .btns {\r\n        width:  8%;\r\n    }\r\n`;\r\n\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst IngButtonContainer = styled.div`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-between;\r\n    div {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\n\r\nconst initialFormValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    imageURL: \"\",\r\n    ingredients: [{ quantity: \"\", measurement: \"\", name: \"\", group: \"\" }],\r\n    steps: [{stepnumber: 1, instructions: \"\"}]\r\n}\r\n\r\n\r\nfunction RecipeCard(props) {\r\n    const { recipe, setRecipes, setClicked } = props;\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [enableSubmit, setEnableSubmit] = useState(true);\r\n    const [errors, setErrors] = useState(true);\r\n\r\n    //Animation Ref\r\n    const animationRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        gsap.from(animationRef.current, {\r\n            autoAlpha: 0,\r\n            duration: 1.25,\r\n            ease: 'power4.inOut'\r\n        })\r\n    }, []);\r\n\r\n    \r\n    useEffect(() => {\r\n        schema.isValid(formValues).then(valid => {\r\n            console.log(valid);\r\n            setEnableSubmit(!valid);\r\n        });\r\n    }, [formValues]);\r\n\r\n    //Edit Handler\r\n    const handleEdit = (e) => {\r\n        e.preventDefault();   \r\n        setIsEditing(!isEditing);\r\n        setFormValues({ ...formValues, ...recipe })\r\n    }\r\n\r\n    //Submit Handler\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();   \r\n\r\n        yup.reach(schema, e.target.name)\r\n        .validate(e.target.value)\r\n        .then(() => {\r\n            setErrors({...errors, [e.target.name]: \"\"})\r\n        })\r\n        .catch(err => {\r\n            setErrors({...errors, [e.target.name]: err.errors[0] })\r\n        })\r\n\r\n        console.log(formValues.imageURL)\r\n        const newRecipe = {\r\n            name: formValues.name,\r\n            type: formValues.type,\r\n            user: {\r\n                    username: localStorage.getItem(\"username\")\r\n                },\r\n            imageURL: formValues.imageURL,\r\n            ingredients: formValues.ingredients,\r\n            steps: formValues.steps\r\n        } \r\n       \r\n        axiosWithAuth().put(`/recipes/recipe/${recipe.recipeid}`, newRecipe)\r\n            .then(res => {\r\n                console.log(res)\r\n                axiosWithAuth().get('/users/getuserinfo')\r\n                    .then(res => {\r\n                        console.log(res.data.recipes);\r\n                        setRecipes(res.data.recipes);\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            })\r\n            .catch(err => console.log(err))  \r\n        setClicked(formValues.name);\r\n        setIsEditing(!isEditing);\r\n    }\r\n\r\n    //Change Handler\r\n    const handleChange = (e, index) => {\r\n        switch(e.target.name) {\r\n            case \"ingredientname\":\r\n                const newIngName = [ ...formValues.ingredients ];\r\n                newIngName[index].name = e.target.value;\r\n                setFormValues({...formValues, ingredients: newIngName });\r\n                break;\r\n            case \"quantity\":\r\n                const newIngQuantity = [ ...formValues.ingredients ]\r\n                newIngQuantity[index].quantity = e.target.value;    \r\n                setFormValues({ ...formValues, ingredients: newIngQuantity });\r\n                break;\r\n            case \"measurement\":\r\n                const newIngMeasurement = [ ...formValues.ingredients ]\r\n                newIngMeasurement[index].measurement = e.target.value;    \r\n                setFormValues({ ...formValues, ingredients: newIngMeasurement });\r\n                break;\r\n            case \"group\":\r\n                let group = \"\";\r\n                (e.target.value === \"\") ? group = \"Ingredient\" : group = e.target.value;\r\n                const newGroup = [ ...formValues.ingredients ]\r\n                newGroup[index].group = group;    \r\n                setFormValues({ ...formValues, ingredients: newGroup });\r\n                break;\r\n            case \"instructions\":\r\n                const newSteps = [ ...formValues.steps ]\r\n                newSteps[index].instructions = e.target.value;                \r\n                setFormValues({ ...formValues, steps: newSteps });\r\n                break;\r\n            default:\r\n                setFormValues({ ...formValues, [e.target.name]: e.target.value });\r\n                break;\r\n        }\r\n    }\r\n\r\n   \r\n    //Button Handlers\r\n    const addIngredient = () => {\r\n        setFormValues({ ...formValues, ingredients: [...formValues.ingredients, {quantity: \"\", measurement: \"\", name: \"\"}] });\r\n    }\r\n\r\n    const delIngredient = (e, ingredientName) => {\r\n        e.preventDefault();\r\n        if (formValues.ingredients.length !== 1) {\r\n            const newList = formValues.ingredients.filter(ing => ing.name !== ingredientName);    \r\n            setFormValues({ ...formValues, ingredients: newList });\r\n        }\r\n    }\r\n    \r\n    const addStep = (e, index) => {\r\n        e.preventDefault();\r\n        if (formValues.steps.length === 1) {\r\n            formValues.steps.push({stepnumber: index + 2, instructions: \"\"});\r\n            setFormValues({ ...formValues, formValues });\r\n        } else {\r\n            formValues.steps.splice(index, 0, {stepnumber: index + 2, instructions: \"\"});\r\n            formValues.steps.map((step, index) => step.stepnumber = index + 1);\r\n            setFormValues({ ...formValues, formValues });\r\n        }\r\n    }\r\n\r\n    const delStep = (e, stepInstructions) => {\r\n        e.preventDefault();\r\n        if (formValues.steps.length !== 1) {\r\n            const newList = formValues.steps.filter(stp => stp.instructions !== stepInstructions);  \r\n            newList.map((step, index) => step.stepnumber = index + 1);\r\n            setFormValues({ ...formValues, steps: newList });    \r\n        }\r\n    }\r\n\r\n\r\n    const deleteRecipe = (e) => {\r\n        e.preventDefault();\r\n        axiosWithAuth().delete(`/recipes/recipe/${recipe.recipeid}`)\r\n        .then(res => {\r\n            console.log(res)\r\n            axiosWithAuth().get('/users/getuserinfo')\r\n                .then(res => {\r\n                    console.log(res.data.recipes);\r\n                    setRecipes(res.data.recipes);\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        })\r\n        .catch(err => console.log(err))  \r\n    }\r\n\r\n\r\n    return(\r\n        <RecipeCardContainer ref={animationRef}>            \r\n            <RecipeTitle>\r\n                <div>\r\n                    <h2>{recipe.name}</h2>\r\n                </div>\r\n                <div className=\"edit\">\r\n                    {!isEditing\r\n                        ? <button className=\"editBtn\" onClick={handleEdit}>Edit</button>\r\n                        : <button className=\"cancelBtn\" onClick={handleEdit}>X</button>\r\n                    }\r\n                </div>\r\n            </RecipeTitle>\r\n            {!isEditing\r\n                ? (\r\n                    <>\r\n                    <InfoBox>\r\n                        {recipe.imageURL.includes(\"http:\") ? <img src=\"/placeholder.jpg\" alt=\"Upload your image here\"/> :<img src={recipe.imageURL} alt={recipe.name}/>} \r\n                        <h3>Ingredients</h3>\r\n                        {recipe.ingredients.map(ing => <div key={uuidv4()}><strong>{ing.quantity} {ing.measurement}</strong> {ing.name}</div>)}\r\n                    </InfoBox>\r\n                    <InfoBox>\r\n                        <h3>Steps</h3>\r\n                        {recipe.steps.map(stp => <div key={uuidv4()}><strong>{stp.stepnumber}.</strong> {stp.instructions}</div>)}\r\n                    </InfoBox>\r\n                    </>\r\n                )\r\n                : (\r\n                    <>\r\n                        <EditInfoBox>\r\n                            <div className=\"title\">\r\n                            <label>Title\r\n                                <input \r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    value={formValues.name}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </label>  \r\n                            </div>\r\n                            <div className=\"type\">\r\n                            <label>Type\r\n                                <input \r\n                                    type=\"text\"\r\n                                    name=\"type\"\r\n                                    value={formValues.type}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </label>  \r\n                            </div>\r\n                        </EditInfoBox>                       \r\n                        <label>Image URL\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"imageURL\"\r\n                                value={formValues.imageURL}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </label>\r\n                    <InfoBox>\r\n                        <h3>Ingredients</h3>\r\n                        {formValues.ingredients.map((ing, index) => (\r\n                            <>\r\n                            <IngredientFields>\r\n                                <div className=\"qty\">\r\n                                    <label>Qty<br/>\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"quantity\"\r\n                                            value={formValues.ingredients[index].quantity}\r\n                                            onChange={e => handleChange(e, index)}                                            \r\n                                        />\r\n                                        </label>\r\n                                </div>\r\n                                <div className=\"msr\">\r\n                                    <label>Measure\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"measurement\"\r\n                                            value={formValues.ingredients[index].measurement}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"ing\">\r\n                                    <label>Ingredient\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"ingredientname\"\r\n                                            value={formValues.ingredients[index].name}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div>             \r\n                                <div className=\"grp\">\r\n                                    <label>Group\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"group\"\r\n                                            value={formValues.ingredients[index].group}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div> \r\n                                <IngButtonContainer className=\"btns\">\r\n                                    <div>\r\n                                        <button onClick={e => delIngredient(e, ing.name)}>-</button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <button onClick={addIngredient}>+</button>\r\n                                    </div>\r\n                                </IngButtonContainer>                               \r\n                            </IngredientFields>\r\n                            \r\n                            </>\r\n                        ))}\r\n                    </InfoBox>\r\n                    <InfoBox>\r\n                        <h3>Steps</h3>\r\n                        {formValues.steps.map((stp, index) => (\r\n                            <IngredientFields>\r\n                                <div className=\"step\">\r\n                                    <label>Step {formValues.steps[index].stepnumber}\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"instructions\"\r\n                                            value={formValues.steps[index].instructions}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                                <IngButtonContainer className=\"btns\">\r\n                                    <button onClick={e => delStep(e, stp.instructions)}>-</button>\r\n                                    <button onClick={e => addStep(e, index)}>+</button>\r\n                                </IngButtonContainer>\r\n                            </IngredientFields>\r\n                        ))}\r\n                    </InfoBox>\r\n                    <ButtonContainer>\r\n                        <button className=\"deleteBtn\" onClick={deleteRecipe}>Delete</button>\r\n                        {enableSubmit ? <button className=\"disabled\">Submit</button> :  <button className=\"submitBtn\" onClick={handleSubmit}>Submit</button>}\r\n                    </ButtonContainer>\r\n                    </>\r\n                )\r\n            }\r\n        </RecipeCardContainer>\r\n    );\r\n}\r\n\r\nexport default RecipeCard;","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeList.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\AddRecipeForm.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\validation\\schema.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":61,"column":7,"nodeType":"69","messageId":"70","endLine":61,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":78,"column":12,"nodeType":"69","messageId":"70","endLine":78,"endColumn":24},{"ruleId":"67","severity":1,"message":"72","line":78,"column":26,"nodeType":"69","messageId":"70","endLine":78,"endColumn":41},{"ruleId":"73","severity":1,"message":"74","line":285,"column":62,"nodeType":"75","endLine":285,"endColumn":120},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'initialErrors' is assigned a value but never used.","Identifier","unusedVar","'enableSubmit' is assigned a value but never used.","'setEnableSubmit' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]