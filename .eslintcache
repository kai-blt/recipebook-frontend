[{"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\index.js":"1","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\App.js":"2","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\reportWebVitals.js":"3","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Home.js":"4","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\globalStyles.js":"5","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Login.js":"6","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Recipes.js":"7","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Nav.js":"8","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\axios\\axiosWithAuth.js":"9","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeCard.js":"10","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\AddRecipeForm.js":"11","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\validation\\schema.js":"12","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeThumbnail.js":"13","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\IngredientList.js":"14"},{"size":640,"mtime":1610585708057,"results":"15","hashOfConfig":"16"},{"size":941,"mtime":1610868488073,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":431,"mtime":1610750548116,"results":"19","hashOfConfig":"16"},{"size":6195,"mtime":1610868258028,"results":"20","hashOfConfig":"16"},{"size":5264,"mtime":1610750706954,"results":"21","hashOfConfig":"16"},{"size":10204,"mtime":1610908630329,"results":"22","hashOfConfig":"16"},{"size":986,"mtime":1610829981074,"results":"23","hashOfConfig":"16"},{"size":298,"mtime":1610406757569,"results":"24","hashOfConfig":"16"},{"size":16313,"mtime":1610908647393,"results":"25","hashOfConfig":"16"},{"size":12490,"mtime":1610832714309,"results":"26","hashOfConfig":"16"},{"size":552,"mtime":1610587048231,"results":"27","hashOfConfig":"16"},{"size":1392,"mtime":1610908803993,"results":"28","hashOfConfig":"16"},{"size":694,"mtime":1610912784281,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1fzh7t8",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\index.js",[],["60","61"],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\App.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\reportWebVitals.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Home.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\globalStyles.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Login.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Recipes.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\Nav.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\axios\\axiosWithAuth.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeCard.js",["62"],"import React, { useState, useEffect } from 'react';\r\nimport  { v4 as uuidv4 } from \"uuid\";\r\nimport IngredientList from './IngredientList';\r\nimport * as yup from 'yup';\r\nimport schema from '../validation/schema';\r\nimport axiosWithAuth from '../axios/axiosWithAuth';\r\nimport styled from 'styled-components';\r\n\r\nconst RecipeCardContainer = styled.div`\r\n    margin-bottom: 4%;\r\n`;\r\n\r\nconst InfoBox = styled.div`\r\n    margin: 10% 0; \r\n\r\n    .group {\r\n        color: red;\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    height: 30vh;\r\n    background: ${({background}) => background.match(/http/i) ? 'url(' + background + ')': '#555' };\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    border-radius: 8px;\r\n    color: #fff;\r\n    margin: 6% 0;\r\n    @media (max-width: 1000px) {\r\n      height: 20vh;\r\n    }\r\n`;\r\n\r\n\r\nconst EditInfoBox = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-between;\r\n    .title {\r\n        width: 65%;\r\n    }\r\n\r\n    .type {\r\n        width: 30%;\r\n    }\r\n`;\r\n\r\n\r\nconst RecipeTitle = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    flex-flow: column wrap;\r\n    .edit {\r\n        width: 100%;\r\n    }\r\n\r\n    h2 {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    h4 {\r\n        font-weight: 500;\r\n    }\r\n\r\n    @media (max-width: 1200px) {\r\n        .edit {\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nconst IngredientFields = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-flow: column wrap;\r\n    align-items: center;\r\n    padding-bottom: 15%;\r\n\r\n    div {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-flow: row nowrap;\r\n    margin-top: 2%;\r\n    background: 1px solid red;\r\n\r\n    div {\r\n        width: 20%;\r\n    }\r\n`;\r\n\r\n\r\nconst StepContainer = styled.div`\r\n    display: flex;\r\n    line-height: 2.25rem;\r\n    margin-bottom: 2%;\r\n    div {\r\n        margin-right: 3%;\r\n    }\r\n\r\n    @media (max-width: 500px) {\r\n        margin-bottom: 6%;\r\n    }\r\n`;\r\n\r\n\r\nconst initialFormValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    imageURL: \"\",\r\n    ingredients: [{ quantity: \"\", measurement: \"\", name: \"\", group: \"\" }],\r\n    steps: [{stepnumber: 1, instructions: \"\"}]\r\n}\r\n\r\n\r\nfunction RecipeCard(props) {\r\n    const { recipe, setRecipes, setClicked } = props;\r\n    const [formValues, setFormValues] = useState(initialFormValues);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [enableSubmit, setEnableSubmit] = useState(true);\r\n    const [errors, setErrors] = useState(true);\r\n    const [groups, setGroups] = useState(Array.from(new Set(recipe.ingredients.map(ing => ing.ingredientgroup))))\r\n    \r\n    useEffect(() => {\r\n        schema.isValid(formValues).then(valid => {\r\n            setEnableSubmit(!valid);\r\n        });\r\n    }, [formValues]);\r\n\r\n    useEffect(() => {\r\n       setGroups((Array.from(new Set(recipe.ingredients.map(ing => ing.ingredientgroup)))).sort());\r\n    }, []);\r\n    \r\n    //Edit Handler\r\n    const handleEdit = (e) => {\r\n        e.preventDefault();   \r\n        setIsEditing(!isEditing);\r\n        setFormValues({ ...formValues, ...recipe })\r\n    }\r\n\r\n    //Submit Handler\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();   \r\n\r\n        yup.reach(schema, e.target.name)\r\n        .validate(e.target.value)\r\n        .then(() => { \r\n            setErrors({...errors, [e.target.name]: \"\"})\r\n        })\r\n        .catch(err => {\r\n            setErrors({...errors, [e.target.name]: err.errors[0] })\r\n        })\r\n             \r\n        console.log(formValues.imageURL)\r\n        const newRecipe = {\r\n            name: formValues.name,\r\n            type: formValues.type,\r\n            user: {\r\n                    username: localStorage.getItem(\"username\")\r\n                },\r\n            imageURL: formValues.imageURL,\r\n            ingredients: formValues.ingredients,\r\n            steps: formValues.steps\r\n        } \r\n       \r\n        axiosWithAuth().put(`/recipes/recipe/${recipe.recipeid}`, newRecipe)\r\n            .then(res => {\r\n                console.log(res)\r\n                axiosWithAuth().get('/users/getuserinfo')\r\n                    .then(res => {\r\n                        console.log(res.data.recipes);\r\n                        setRecipes(res.data.recipes);\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            })\r\n            .catch(err => console.log(err))  \r\n        setClicked(formValues.name);\r\n        setIsEditing(!isEditing);\r\n    }\r\n\r\n    //Change Handler\r\n    const handleChange = (e, index) => {\r\n        switch(e.target.name) {\r\n            case \"ingredientname\":\r\n                const newIngName = [ ...formValues.ingredients ];\r\n                newIngName[index].name = e.target.value;\r\n                setFormValues({...formValues, ingredients: newIngName });\r\n                break;\r\n            case \"quantity\":\r\n                const newIngQuantity = [ ...formValues.ingredients ]\r\n                newIngQuantity[index].quantity = e.target.value;    \r\n                setFormValues({ ...formValues, ingredients: newIngQuantity });\r\n                break;\r\n            case \"measurement\":\r\n                const newIngMeasurement = [ ...formValues.ingredients ]\r\n                newIngMeasurement[index].measurement = e.target.value;    \r\n                setFormValues({ ...formValues, ingredients: newIngMeasurement });\r\n                break;\r\n            case \"group\":\r\n                const newGroup = [ ...formValues.ingredients ]\r\n                newGroup[index].ingredientgroup = e.target.value;    \r\n                setFormValues({ ...formValues, ingredients: newGroup });\r\n                break;\r\n            case \"instructions\":\r\n                const newSteps = [ ...formValues.steps ]\r\n                newSteps[index].instructions = e.target.value;                \r\n                setFormValues({ ...formValues, steps: newSteps });\r\n                break;\r\n            default:\r\n                setFormValues({ ...formValues, [e.target.name]: e.target.value });\r\n                break;\r\n        }\r\n    }\r\n\r\n   \r\n    //Button Handlers\r\n    const addIngredient = (e, index) => {\r\n        e.preventDefault();\r\n        formValues.ingredients.splice(index + 1, 0, {quantity: \"\", measurement: \"\", name: \"\", ingredientgroup: \"\"});\r\n        setFormValues({ ...formValues, formValues });\r\n    }\r\n\r\n    const delIngredient = (e, ingIndex) => {\r\n        e.preventDefault();\r\n        if (formValues.ingredients.length !== 1) {\r\n            const newList = formValues.ingredients.filter((ing, index)=> index !== ingIndex);    \r\n            setFormValues({ ...formValues, ingredients: newList });\r\n        }\r\n    }\r\n    \r\n    const addStep = (e, index) => {\r\n        e.preventDefault();\r\n        if (formValues.steps.length === 1) {\r\n            formValues.steps.push({stepnumber: index + 2, instructions: \"\"});\r\n            setFormValues({ ...formValues, formValues });\r\n        } else {\r\n            formValues.steps.splice(index, 0, {stepnumber: index + 2, instructions: \"\"});\r\n            formValues.steps.map((step, index) => step.stepnumber = index + 1);\r\n            setFormValues({ ...formValues, formValues });\r\n        }\r\n    }\r\n\r\n    const delStep = (e, stepInstructions) => {\r\n        e.preventDefault();\r\n        if (formValues.steps.length !== 1) {\r\n            const newList = formValues.steps.filter(stp => stp.instructions !== stepInstructions);  \r\n            newList.map((step, index) => step.stepnumber = index + 1);\r\n            setFormValues({ ...formValues, steps: newList });    \r\n        }\r\n    }\r\n\r\n\r\n    const deleteRecipe = (e) => {\r\n        e.preventDefault();\r\n        axiosWithAuth().delete(`/recipes/recipe/${recipe.recipeid}`)\r\n        .then(res => {\r\n            console.log(res)\r\n            axiosWithAuth().get('/users/getuserinfo')\r\n                .then(res => {\r\n                    console.log(res.data.recipes);\r\n                    setRecipes(res.data.recipes);\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        })\r\n        .catch(err => console.log(err))  \r\n    }\r\n\r\n\r\n    return(\r\n        <RecipeCardContainer>            \r\n            <RecipeTitle>\r\n                <div>\r\n                    <h2>{recipe.name}</h2>\r\n                    {recipe.type ? <h4>{recipe.type}</h4> : null}\r\n                </div>\r\n                <div className=\"edit\">\r\n                    {!isEditing\r\n                        ? <button className=\"editBtn\" onClick={handleEdit}>Edit</button>\r\n                        : <button className=\"cancelBtn\" onClick={handleEdit}>Cancel</button>\r\n                    }\r\n                </div>\r\n            </RecipeTitle>\r\n            {!isEditing\r\n                ? (\r\n                    <>\r\n                    <ImageContainer background={recipe.imageURL}/>\r\n                    <InfoBox>\r\n                        <h3>Ingredients</h3>                        \r\n                       {groups.map(grp => <IngredientList group={grp} ingredients={recipe.ingredients} /> )}\r\n                    </InfoBox>\r\n                    <InfoBox>\r\n                        <h3>Steps</h3>\r\n                        {recipe.steps.map(stp => <StepContainer key={uuidv4()}><div><strong>{stp.stepnumber}.</strong></div><div>{stp.instructions}</div></StepContainer>)}\r\n                    </InfoBox>\r\n                    </>\r\n                )\r\n                : (\r\n                    <>\r\n                        <EditInfoBox>\r\n                            <div className=\"title\">\r\n                            <label>Title\r\n                                <input \r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    value={formValues.name}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </label>  \r\n                            </div>\r\n                            <div className=\"type\">\r\n                            <label>Type\r\n                                <input \r\n                                    type=\"text\"\r\n                                    name=\"type\"\r\n                                    value={formValues.type}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </label>  \r\n                            </div>\r\n                        </EditInfoBox>                       \r\n                        <label>Image URL\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"imageURL\"\r\n                                value={formValues.imageURL}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </label>\r\n                    <InfoBox>\r\n                        <h3>Ingredients</h3>\r\n                        {formValues.ingredients.map((ing, index) => (\r\n                            <>\r\n                            <IngredientFields>\r\n                                <div className=\"qty\">\r\n                                    <label>Qty<br/>\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"quantity\"\r\n                                            value={formValues.ingredients[index].quantity}\r\n                                            onChange={e => handleChange(e, index)}                                            \r\n                                        />\r\n                                        </label>\r\n                                </div>\r\n                                <div className=\"msr\">\r\n                                    <label>Measure\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"measurement\"\r\n                                            value={formValues.ingredients[index].measurement}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"ing\">\r\n                                    <label>Ingredient\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"ingredientname\"\r\n                                            value={formValues.ingredients[index].name}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div>             \r\n                                <div className=\"grp\">\r\n                                    <label>Group\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"group\"\r\n                                            value={formValues.ingredients[index].ingredientgroup}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div> \r\n                                <ButtonContainer className=\"btns\">\r\n                                    <div>\r\n                                        <button className=\"deleteBtn2\" onClick={e => delIngredient(e, index)}>-</button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <button className=\"addBtn\" onClick={e => addIngredient(e, index)}>+</button>\r\n                                    </div>\r\n                                </ButtonContainer>                               \r\n                            </IngredientFields>\r\n                            \r\n                            </>\r\n                        ))}\r\n                    </InfoBox>\r\n                    <InfoBox>\r\n                        <h3>Steps</h3>\r\n                        {formValues.steps.map((stp, index) => (\r\n                            <IngredientFields>\r\n                                <div className=\"step\">\r\n                                    <label>Step {formValues.steps[index].stepnumber}\r\n                                        <input \r\n                                            type=\"text\"\r\n                                            name=\"instructions\"\r\n                                            value={formValues.steps[index].instructions}\r\n                                            onChange={e => handleChange(e, index)}\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                                <ButtonContainer className=\"btns\">\r\n                                    <div>\r\n                                        <button className=\"deleteBtn2\" onClick={e => delStep(e, stp.instructions)}>-</button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <button className=\"addBtn\" onClick={e => addStep(e, index)}>+</button>\r\n                                    </div>\r\n                                </ButtonContainer>\r\n                            </IngredientFields>\r\n                        ))}\r\n                    </InfoBox>\r\n                    <ButtonContainer>\r\n                        <button className=\"deleteBtn\" onClick={deleteRecipe}>Delete</button>\r\n                        {enableSubmit ? <button className=\"disabled\">Submit</button> :  <button className=\"submitBtn\" onClick={handleSubmit}>Submit</button>}\r\n                    </ButtonContainer>\r\n                    </>\r\n                )\r\n            }\r\n        </RecipeCardContainer>\r\n    );\r\n}\r\n\r\nexport default RecipeCard;","C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\AddRecipeForm.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\validation\\schema.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\RecipeThumbnail.js",[],"C:\\_LambdaSchool\\_recipebookproject\\recipebook-frontend\\src\\components\\IngredientList.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":140,"column":8,"nodeType":"69","endLine":140,"endColumn":10,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'recipe.ingredients'. Either include it or remove the dependency array.","ArrayExpression",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [recipe.ingredients]",{"range":"76","text":"77"},[3080,3082],"[recipe.ingredients]"]